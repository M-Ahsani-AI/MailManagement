{"ast":null,"code":"// backend/utils/numberToWords.js\n\nconst terbilang = angka => {\n  const bilangan = ['', 'Satu', 'Dua', 'Tiga', 'Empat', 'Lima', 'Enam', 'Tujuh', 'Delapan', 'Sembilan', 'Sepuluh', 'Sebelas'];\n  if (angka < 12) {\n    return bilangan[angka];\n  } else if (angka < 20) {\n    return terbilang(angka - 10) + ' Belas';\n  } else if (angka < 100) {\n    return terbilang(Math.floor(angka / 10)) + ' Puluh ' + terbilang(angka % 10);\n  } else if (angka < 200) {\n    return 'Seratus ' + terbilang(angka - 100);\n  } else if (angka < 1000) {\n    return terbilang(Math.floor(angka / 100)) + ' Ratus ' + terbilang(angka % 100);\n  } else if (angka < 2000) {\n    return 'Seribu ' + terbilang(angka - 1000);\n  } else if (angka < 1000000) {\n    return terbilang(Math.floor(angka / 1000)) + ' Ribu ' + terbilang(angka % 1000);\n  } else if (angka < 1000000000) {\n    return terbilang(Math.floor(angka / 1000000)) + ' Juta ' + terbilang(angka % 1000000);\n  } else if (angka < 1000000000000) {\n    return terbilang(Math.floor(angka / 1000000000)) + ' Milyar ' + terbilang(angka % 1000000000);\n  } else if (angka < 1000000000000000) {\n    return terbilang(Math.floor(angka / 1000000000000)) + ' Triliun ' + terbilang(angka % 1000000000000);\n  }\n  return 'Angka terlalu besar';\n};\nconst numberToWords = number => {\n  if (number === 0) return 'Nol Rupiah';\n  const parts = number.toString().split('.');\n  const integerPart = parseInt(parts[0], 10);\n  const decimalPart = parts[1] ? parseInt(parts[1], 10) : 0;\n  let result = '';\n  if (integerPart > 0) {\n    result += terbilang(integerPart) + ' Rupiah';\n  }\n  if (decimalPart > 0) {\n    if (result) {\n      result += ' dan ';\n    }\n    result += terbilang(decimalPart) + ' Sen';\n  }\n  return result.trim();\n};\nmodule.exports = {\n  numberToWords\n};","map":{"version":3,"names":["terbilang","angka","bilangan","Math","floor","numberToWords","number","parts","toString","split","integerPart","parseInt","decimalPart","result","trim","module","exports"],"sources":["C:/Users/moham/Documents/CODE/SURAT CV MALIKI/frontend/src/utils/numberToWords.js"],"sourcesContent":["// backend/utils/numberToWords.js\r\n\r\nconst terbilang = (angka) => {\r\n  const bilangan = [\r\n    '',\r\n    'Satu',\r\n    'Dua',\r\n    'Tiga',\r\n    'Empat',\r\n    'Lima',\r\n    'Enam',\r\n    'Tujuh',\r\n    'Delapan',\r\n    'Sembilan',\r\n    'Sepuluh',\r\n    'Sebelas',\r\n  ];\r\n\r\n  if (angka < 12) {\r\n    return bilangan[angka];\r\n  } else if (angka < 20) {\r\n    return terbilang(angka - 10) + ' Belas';\r\n  } else if (angka < 100) {\r\n    return terbilang(Math.floor(angka / 10)) + ' Puluh ' + terbilang(angka % 10);\r\n  } else if (angka < 200) {\r\n    return 'Seratus ' + terbilang(angka - 100);\r\n  } else if (angka < 1000) {\r\n    return terbilang(Math.floor(angka / 100)) + ' Ratus ' + terbilang(angka % 100);\r\n  } else if (angka < 2000) {\r\n    return 'Seribu ' + terbilang(angka - 1000);\r\n  } else if (angka < 1000000) {\r\n    return terbilang(Math.floor(angka / 1000)) + ' Ribu ' + terbilang(angka % 1000);\r\n  } else if (angka < 1000000000) {\r\n    return terbilang(Math.floor(angka / 1000000)) + ' Juta ' + terbilang(angka % 1000000);\r\n  } else if (angka < 1000000000000) {\r\n    return terbilang(Math.floor(angka / 1000000000)) + ' Milyar ' + terbilang(angka % 1000000000);\r\n  } else if (angka < 1000000000000000) {\r\n    return terbilang(Math.floor(angka / 1000000000000)) + ' Triliun ' + terbilang(angka % 1000000000000);\r\n  }\r\n  return 'Angka terlalu besar';\r\n};\r\n\r\nconst numberToWords = (number) => {\r\n  if (number === 0) return 'Nol Rupiah';\r\n  \r\n  const parts = number.toString().split('.');\r\n  const integerPart = parseInt(parts[0], 10);\r\n  const decimalPart = parts[1] ? parseInt(parts[1], 10) : 0;\r\n  \r\n  let result = '';\r\n  if (integerPart > 0) {\r\n    result += terbilang(integerPart) + ' Rupiah';\r\n  }\r\n  \r\n  if (decimalPart > 0) {\r\n    if (result) {\r\n      result += ' dan ';\r\n    }\r\n    result += terbilang(decimalPart) + ' Sen';\r\n  }\r\n  \r\n  return result.trim();\r\n};\r\n\r\nmodule.exports = { numberToWords };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}